{"version":3,"sources":["recipe.module.css","Recipe.js","components/Loader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","output","url","className","style","recipe","src","alt","Math","floor","map","ingredient","text","href","Loader","class","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","loading","setLoading","useEffect","a","fetch","response","json","data","hits","getRecipes","onSubmit","e","preventDefault","type","value","onChange","target","key","label","yield","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2MCuB3CC,EArBA,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,IAC1D,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAMR,GAEN,yBAAKM,UAAWC,IAAML,MAAOO,IAAKP,EAAOQ,IAAKV,IAC9C,gDAAsBW,KAAKC,MAAMX,IACjC,4CAAkBG,EAAlB,aACA,4BACKD,EAAYU,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAKxB,uBAAGC,KAAMX,EAAKC,UAAU,4BAAxB,kCCdGW,EAFA,kBAAO,yBAAKC,MAAM,cAAa,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,gCCwE5GC,G,MArEH,WAGV,IAHgB,EAMcC,mBAAS,IANvB,mBAMTC,EANS,KAMAC,EANA,OAOYF,mBAAS,IAPrB,mBAOTG,EAPS,KAODC,EAPC,OAQUJ,mBAAS,SARnB,mBAQTK,EARS,KAQFC,EARE,OASeN,oBAAS,GATxB,mBASTO,EATS,KASAC,EATA,KAalBC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,6DACjBF,GAAW,GADM,SAEKG,MAAM,mCAAD,OAAoCN,EAApC,mBAbd,WAac,oBAZb,qCAUG,cAEZO,EAFY,gBAGCA,EAASC,OAHV,OAGZC,EAHY,OAIlBZ,EAAWY,EAAKC,MAChBP,GAAW,GALO,2CAAH,qDAOhBQ,KACC,CAACX,IAaF,OACE,yBAAKnB,UAAU,OAEnB,yBAAKA,UAAU,gBACb,4DACA,oEACA,2FAGI,0BAAM+B,SAfM,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAYqBlB,UAAU,eAEnC,2BAAOA,UAAU,aAAakC,KAAK,OAAOC,MAAOlB,EAAQmB,SArB5C,SAAAJ,GACpBd,EAAUc,EAAEK,OAAOF,UAqBZ,4BAAQnC,UAAU,gBAAgBkC,KAAK,UAAvC,WAIF,yBAAKlC,UAAU,WACdqB,EAAU,kBAAC,EAAD,MAAYN,EAAQR,KAAI,SAAAL,GAAM,OACvC,kBAAC,EAAD,CACAoC,IAAMpC,EAAOA,OAAOqC,MACpB7C,MAAOQ,EAAOA,OAAOqC,MACrB5C,SAAUO,EAAOA,OAAOP,SACxBC,MAAOM,EAAOA,OAAON,MACrBC,YAAaK,EAAOA,OAAOL,YAC3BE,IAAKG,EAAOA,OAAOH,IACnBD,OAAQI,EAAOA,OAAOsC,eCrDVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d5f26ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3UUhS\",\"image\":\"recipe_image__1-xX2\"};","import React from 'react';\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ({title, calories, image, ingredients, output, url}) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1 >{title}</h1>\r\n            \r\n            <img className={style.image} src={image} alt={title}/>\r\n            <p>Total Calories is {Math.floor(calories)}</p>\r\n            <p>Yield will be {output} servings</p>\r\n            <ul>\r\n                {ingredients.map(ingredient =>(\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n                \r\n            </ul>\r\n\r\n            <a href={url} className=\"search-button inner-link\"> Check Out The Full Recipe! </a>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React from \"react\"\r\n\r\nconst Loader = () => (<div class=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>)\r\n\r\nexport default Loader;","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport Loader from './components/Loader'\nimport './App.css';\n\nconst App = () => {\n\n\n  const APP_ID = '27d2b96c';\n  const APP_KEY = 'fc78a95dae4a41c9c6d6d14f5787f383';\n  \n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('Bread');\n  const [loading, setLoading ] = useState(false);\n\n\n  \nuseEffect(() => {\n  const getRecipes = async () => {\n    setLoading(true)\n   const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n   const data = await response.json();\n   setRecipes(data.hits)\n   setLoading(false)\n  };\n  getRecipes();\n}, [query]);\n\n\nconst updateSearch = e => {\n setSearch(e.target.value)\n}\n\nconst getSearch = e => {\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\n  return(\n    <div className=\"App\">\n\n<div className=\"instructions\">\n  <h1> Chef Geoff's Recipe Finder!</h1>\n  <h2> Looking for How to Cook Something? </h2>\n  <p> Search for a recipe or something that tickles your fancy! </p>\n</div>\n\n      <form onSubmit={getSearch} className=\"search-form\">\n \n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">\n           Search\n           </button>\n      </form>\n      <div className=\"recipes\">\n      {loading ? <Loader/> : recipes.map(recipe =>(\n        <Recipe \n        key ={recipe.recipe.label}\n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories} \n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        url={recipe.recipe.url}\n        output={recipe.recipe.yield} \n         /> \n      ))}\n      </div>\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}